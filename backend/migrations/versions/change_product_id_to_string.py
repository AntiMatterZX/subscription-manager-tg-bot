"""Change product ID from integer to string

Revision ID: change_product_id_to_string
Revises: cc13a695bbe8
Create Date: 2025-01-27 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'change_product_id_to_string'
down_revision = 'cc13a695bbe8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, drop foreign key constraints
    with op.batch_alter_table('telegram_groups', schema=None) as batch_op:
        batch_op.drop_constraint('telegram_groups_product_id_fkey', type_='foreignkey')
    
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.drop_constraint('subscriptions_product_id_fkey', type_='foreignkey')
    
    # Change product_id column in telegram_groups table
    with op.batch_alter_table('telegram_groups', schema=None) as batch_op:
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=24),
               existing_nullable=True)
    
    # Change product_id column in subscriptions table
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=24),
               existing_nullable=False)
    
    # Change id column in products table
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=24),
               existing_nullable=False)
    
    # Re-add foreign key constraints
    with op.batch_alter_table('telegram_groups', schema=None) as batch_op:
        batch_op.create_foreign_key('telegram_groups_product_id_fkey', 'products', ['product_id'], ['id'])
    
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.create_foreign_key('subscriptions_product_id_fkey', 'products', ['product_id'], ['id'])
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop foreign key constraints
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.drop_constraint('subscriptions_product_id_fkey', type_='foreignkey')
    
    with op.batch_alter_table('telegram_groups', schema=None) as batch_op:
        batch_op.drop_constraint('telegram_groups_product_id_fkey', type_='foreignkey')
    
    # Change product_id column in subscriptions table back to integer
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.alter_column('product_id',
               existing_type=sa.String(length=24),
               type_=sa.INTEGER(),
               existing_nullable=False)
    
    # Change product_id column in telegram_groups table back to integer
    with op.batch_alter_table('telegram_groups', schema=None) as batch_op:
        batch_op.alter_column('product_id',
               existing_type=sa.String(length=24),
               type_=sa.INTEGER(),
               existing_nullable=True)
    
    # Change id column in products table back to integer
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.String(length=24),
               type_=sa.INTEGER(),
               existing_nullable=False)
    
    # Re-add foreign key constraints
    with op.batch_alter_table('telegram_groups', schema=None) as batch_op:
        batch_op.create_foreign_key('telegram_groups_product_id_fkey', 'products', ['product_id'], ['id'])
    
    with op.batch_alter_table('subscriptions', schema=None) as batch_op:
        batch_op.create_foreign_key('subscriptions_product_id_fkey', 'products', ['product_id'], ['id'])
    
    # ### end Alembic commands ### 